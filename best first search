% best_first_search(StartNode, GoalNode, Path, Cost).
% Path is the sequence of nodes from StartNode to GoalNode.
% Cost is the total cost of traveling from StartNode to GoalNode.

% Edge representation: edge(Node1, Node2, Cost).
edge(a, b, 1).
edge(a, c, 2).
edge(b, d, 3).
edge(c, d, 1).
edge(c, e, 5).
edge(d, f, 2).
edge(e, f, 1).

% Heuristic representation: heuristic(Node, HeuristicValue).
heuristic(a, 6).
heuristic(b, 4).
heuristic(c, 3).
heuristic(d, 2).
heuristic(e, 1).
heuristic(f, 0).

% Best-First Search implementation.
best_first_search(Start, Goal, Path, Cost) :-
    best_first_search_helper([[Start]], Goal, Path, Cost).

best_first_search_helper([[Goal|Rest]|_], Goal, Path, Cost) :-
    reverse([Goal|Rest], Path),
    calculate_cost(Path, Cost).

best_first_search_helper([CurrentPath|RestPaths], Goal, Path, Cost) :-
    CurrentPath = [CurrentNode|_],
    findall(
        [NextNode|CurrentPath],
        (edge(CurrentNode, NextNode, _), \+ member(NextNode, CurrentPath)),
        NewPaths
    ),
    sort_paths_by_heuristic(NewPaths, SortedNewPaths),
    append(RestPaths, SortedNewPaths, UpdatedPaths),
    best_first_search_helper(UpdatedPaths, Goal, Path, Cost).

% Calculate the cost of a given path.
calculate_cost([_], 0).
calculate_cost([Node1, Node2|Rest], Cost) :-
    edge(Node1, Node2, StepCost),
    calculate_cost([Node2|Rest], RestCost),
    Cost is StepCost + RestCost.

% Sort paths by heuristic value of the first node in each path.
sort_paths_by_heuristic(Paths, SortedPaths) :-
    map_list_to_pairs(heuristic_of_path, Paths, Pairs),
    keysort(Pairs, SortedPairs),
    pairs_values(SortedPairs, SortedPaths).

heuristic_of_path([Node|_], HeuristicValue) :-
    heuristic(Node, HeuristicValue).

% Test the best_first_search/4 predicate.
test :-
    best_first_search(a, f, Path, Cost),
    writeln('Path':Path),
    writeln('Cost':Cost).
